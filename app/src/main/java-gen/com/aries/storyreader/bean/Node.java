package com.aries.storyreader.bean;

import com.aries.storyreader.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.aries.storyreader.dao.DubDao;
import com.aries.storyreader.dao.NodeDao;
import com.aries.storyreader.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "NODE".
 */
public class Node {

    private Long id;
    private String content;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NodeDao myDao;

    private User role;
    private Long role__resolvedKey;

    private Dub dub;
    private Long dub__resolvedKey;


    public Node() {
    }

    public Node(Long id) {
        this.id = id;
    }

    public Node(Long id, String content) {
        this.id = id;
        this.content = content;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNodeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    /** To-one relationship, resolved on first access. */
    public User getRole() {
        Long __key = this.id;
        if (role__resolvedKey == null || !role__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User roleNew = targetDao.load(__key);
            synchronized (this) {
                role = roleNew;
            	role__resolvedKey = __key;
            }
        }
        return role;
    }

    public void setRole(User role) {
        synchronized (this) {
            this.role = role;
            id = role == null ? null : role.getId();
            role__resolvedKey = id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Dub getDub() {
        Long __key = this.id;
        if (dub__resolvedKey == null || !dub__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DubDao targetDao = daoSession.getDubDao();
            Dub dubNew = targetDao.load(__key);
            synchronized (this) {
                dub = dubNew;
            	dub__resolvedKey = __key;
            }
        }
        return dub;
    }

    public void setDub(Dub dub) {
        synchronized (this) {
            this.dub = dub;
            id = dub == null ? null : dub.getId();
            dub__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
